{
    "code": 200,
    "error": "",
    "message": "",
    "data": {
        "records": [
            {
                "id": "2e49bae134884cca89435394c86a3aee",
                "createBy": "10043",
                "createDate": "2023-03-16 17:57:05",
                "updateBy": "10043",
                "updateDate": "2023-03-16 17:57:05",
                "remarks": null,
                "orders": null,
                "isNewRecord": false,
                "name": "批量指令执行模板",
                "type": "action_script",
                "version": "1.0.0",
                "lang": "python",
                "code": "    # version: Python3\n###################################################################################################\n#调试打印变量：\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n#    var = \"test\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n#\t raise Exception(var)\n#result字典说明：\n#\t result[\"rc\"]: 0或1，0表示指令执行成功，1表示指令执行失败\n#\t result[\"failed\"]: 脚本执行状态(对应用status)，True或False,设置该值可以定义脚本成功或失败\n# \t result[\"stdout\"]: 指令执行成功时的输出数据(对应用originalMsg)\n#    result[\"stderr\"]：指令执行出错时的描述信息\n#    result[\"msg\"]：用户自定义的错误描述信息(脚本失败时对应detail)，如巡检CPU指标异常\n###################################################################################################\n# please edit your code here:\ndef main(self, task_vars):\n    commandList = [\n        \"pwd\",\n        \"ifconfig\",\n    ]\n    err_msg = []\n    result_msg = []\n    rc = 0\n    for command in commandList:\n        self._task.args['_raw_params'] = command\n        result = self.execute_cmd(task_vars)\n        if result.get(\"failed\"):\n            rc = 1\n            err_msg.append(result.get(\"stderr\"))\n        else:\n            result_msg.append(result.get('stdout'))\n    if rc:\n        result[\"rc\"] = 1\n        result[\"msg\"] = err_msg\n    result[\"stdout\"] = result_msg\n    return result",
                "base64Code": "ICAgICMgdmVyc2lvbjogUHl0aG9uMwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKI+iwg+ivleaJk+WNsOWPmOmHj++8mgkJCQkJCQkJCQkJCQkJCQkJCQkKIyAgICB2YXIgPSAidGVzdCIJCQkJCQkJCQkJCQkJCQkJCQkJCiMJIHJhaXNlIEV4Y2VwdGlvbih2YXIpCiNyZXN1bHTlrZflhbjor7TmmI7vvJoKIwkgcmVzdWx0WyJyYyJdOiAw5oiWMe+8jDDooajnpLrmjIfku6TmiafooYzmiJDlip/vvIwx6KGo56S65oyH5Luk5omn6KGM5aSx6LSlCiMJIHJlc3VsdFsiZmFpbGVkIl06IOiEmuacrOaJp+ihjOeKtuaAgSjlr7nlupTnlKhzdGF0dXMp77yMVHJ1ZeaIlkZhbHNlLOiuvue9ruivpeWAvOWPr+S7peWumuS5ieiEmuacrOaIkOWKn+aIluWksei0pQojIAkgcmVzdWx0WyJzdGRvdXQiXTog5oyH5Luk5omn6KGM5oiQ5Yqf5pe255qE6L6T5Ye65pWw5o2uKOWvueW6lOeUqG9yaWdpbmFsTXNnKQojICAgIHJlc3VsdFsic3RkZXJyIl3vvJrmjIfku6TmiafooYzlh7rplJnml7bnmoTmj4/ov7Dkv6Hmga8KIyAgICByZXN1bHRbIm1zZyJd77ya55So5oi36Ieq5a6a5LmJ55qE6ZSZ6K+v5o+P6L+w5L+h5oGvKOiEmuacrOWksei0peaXtuWvueW6lGRldGFpbCnvvIzlpoLlt6Hmo4BDUFXmjIfmoIflvILluLgKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgcGxlYXNlIGVkaXQgeW91ciBjb2RlIGhlcmU6CmRlZiBtYWluKHNlbGYsIHRhc2tfdmFycyk6CiAgICBjb21tYW5kTGlzdCA9IFsKICAgICAgICAicHdkIiwKICAgICAgICAiaWZjb25maWciLAogICAgXQogICAgZXJyX21zZyA9IFtdCiAgICByZXN1bHRfbXNnID0gW10KICAgIHJjID0gMAogICAgZm9yIGNvbW1hbmQgaW4gY29tbWFuZExpc3Q6CiAgICAgICAgc2VsZi5fdGFzay5hcmdzWydfcmF3X3BhcmFtcyddID0gY29tbWFuZAogICAgICAgIHJlc3VsdCA9IHNlbGYuZXhlY3V0ZV9jbWQodGFza192YXJzKQogICAgICAgIGlmIHJlc3VsdC5nZXQoImZhaWxlZCIpOgogICAgICAgICAgICByYyA9IDEKICAgICAgICAgICAgZXJyX21zZy5hcHBlbmQocmVzdWx0LmdldCgic3RkZXJyIikpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmVzdWx0X21zZy5hcHBlbmQocmVzdWx0LmdldCgnc3Rkb3V0JykpCiAgICBpZiByYzoKICAgICAgICByZXN1bHRbInJjIl0gPSAxCiAgICAgICAgcmVzdWx0WyJtc2ciXSA9IGVycl9tc2cKICAgIHJlc3VsdFsic3Rkb3V0Il0gPSByZXN1bHRfbXNnCiAgICByZXR1cm4gcmVzdWx0",
                "label": null,
                "authScope": "public",
                "args": null,
                "params": [],
                "description": "批量指令执行模板",
                "beginDate": null,
                "endDate": null,
                "user": null,
                "authUser": null,
                "editable": "0"
            },
            {
                "id": "9458ba91d8e349de804405026b7c4c9b",
                "createBy": "1",
                "createDate": "2021-12-10 14:55:24",
                "updateBy": "10112",
                "updateDate": "2023-02-22 11:49:36",
                "remarks": null,
                "orders": null,
                "isNewRecord": false,
                "name": "边缘云华为交换机温度检查",
                "type": "forward_online_script",
                "version": "1.0.7",
                "lang": "python",
                "code": "#dis interface brief\nimport re\n# version: Python3\n###################################################################################################\n# _task.args字典说明\n#     command: 发送到远端网络设备的命令。\n#\n# result字典说明:\n#     failed: 布尔值, 命令是否执行成功。\n#     stdout: 命令的标准输出。\n#     msg: 命令的错误输出。\n###################################################################################################\n# please edit your code here:\ndef main(self, task_vars):\n    self._task.args['command'] = 'display device temper all'\n    result = self.execute_cmd(task_vars)\n    if result.get('stdout'):\n        lines = result.get('stdout').split(\"(Celsius)    (Celsius)     (Celsius)  \")\n\n    #---------------------------------------------------------------------------------\n    #Slot    Card    SensorName    Status         Major        Fatal        Current   \n    #                                           (Celsius)    (Celsius)     (Celsius)  \n    #---------------------------------------------------------------------------------\n    #1       --      Outlet-1(LSW) NORMAL          75           85            41      \n    #        --      Intake-1(LSW) NORMAL          75           85            49      \n    #        --      CPU           NORMAL         105          120            38      \n    #        --      LSW           NORMAL         105          120            60      \n    #        --      LSW           NORMAL         105          120            62      \n    #---------------------------------------------------------------------------------\n\n        device = re.compile(r'(\\d+|\\S+|\\s+)\\s+(\\s+|\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)')\n        tem = {}\n        res = []\n        for l in lines[1].split('\\n'):\n            if l:\n                device_n = device.match(l)\n                if device_n:\n                    tem={\n                        'Status':device_n.group(4),\n                        'Major':device_n.group(5),\n                        'Current':device_n.group(7)\n                    }\n                    res.append(tem)\n\n        err_m = \"\"\n        # raise Exception(tem)\n\n        err_status = []\n        for deviceru in res:\n            if  'Normal' in deviceru['Status'] :\n                if int(deviceru['Current']) < int(deviceru['Major']):                    \n                    err_status.append('\\n设备状态:{0} 当前温度:{1} < 温度限制:{2} 状态为正常'.format(deviceru['Status'],deviceru['Current'],deviceru['Major']))\n                else:\n                    err_status.append('\\n设备状态:{0} 当前温度:{1} > 温度限制:{2} 状态为不正常'.format(deviceru['Status'],deviceru['Current'],deviceru['Major']))\n            else:\n                if int(deviceru['Current']) < int(deviceru['Major']):                             \n                    err_status.append('\\n设备状态:{0} 当前温度:{1} < 温度限制:{2} 状态为正常'.format(deviceru['Status'],deviceru['Current'],deviceru['Major'])) \n                else:\n                    err_status.append('\\n设备状态:{0} 当前温度:{1} > 温度限制:{2} 状态为不正常'.format(deviceru['Status'],deviceru['Current'],deviceru['Major']))\n        if err_status:\n            err_m = err_m + '情况如下：{} \\n'.format(\", \".join(err_status))\n            result['detail'] = err_m\n    else:\n        result['msg']='请检查命令是否错误或者不支持'\n    return result",
                "base64Code": "I2RpcyBpbnRlcmZhY2UgYnJpZWYKaW1wb3J0IHJlCiMgdmVyc2lvbjogUHl0aG9uMwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBfdGFzay5hcmdz5a2X5YW46K+05piOCiMgICAgIGNvbW1hbmQ6IOWPkemAgeWIsOi/nOerr+e9kee7nOiuvuWkh+eahOWRveS7pOOAggojCiMgcmVzdWx05a2X5YW46K+05piOOgojICAgICBmYWlsZWQ6IOW4g+WwlOWAvCwg5ZG95Luk5piv5ZCm5omn6KGM5oiQ5Yqf44CCCiMgICAgIHN0ZG91dDog5ZG95Luk55qE5qCH5YeG6L6T5Ye644CCCiMgICAgIG1zZzog5ZG95Luk55qE6ZSZ6K+v6L6T5Ye644CCCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIHBsZWFzZSBlZGl0IHlvdXIgY29kZSBoZXJlOgpkZWYgbWFpbihzZWxmLCB0YXNrX3ZhcnMpOgogICAgc2VsZi5fdGFzay5hcmdzWydjb21tYW5kJ10gPSAnZGlzcGxheSBkZXZpY2UgdGVtcGVyIGFsbCcKICAgIHJlc3VsdCA9IHNlbGYuZXhlY3V0ZV9jbWQodGFza192YXJzKQogICAgaWYgcmVzdWx0LmdldCgnc3Rkb3V0Jyk6CiAgICAgICAgbGluZXMgPSByZXN1bHQuZ2V0KCdzdGRvdXQnKS5zcGxpdCgiKENlbHNpdXMpICAgIChDZWxzaXVzKSAgICAgKENlbHNpdXMpICAiKQoKICAgICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICNTbG90ICAgIENhcmQgICAgU2Vuc29yTmFtZSAgICBTdGF0dXMgICAgICAgICBNYWpvciAgICAgICAgRmF0YWwgICAgICAgIEN1cnJlbnQgICAKICAgICMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKENlbHNpdXMpICAgIChDZWxzaXVzKSAgICAgKENlbHNpdXMpICAKICAgICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICMxICAgICAgIC0tICAgICAgT3V0bGV0LTEoTFNXKSBOT1JNQUwgICAgICAgICAgNzUgICAgICAgICAgIDg1ICAgICAgICAgICAgNDEgICAgICAKICAgICMgICAgICAgIC0tICAgICAgSW50YWtlLTEoTFNXKSBOT1JNQUwgICAgICAgICAgNzUgICAgICAgICAgIDg1ICAgICAgICAgICAgNDkgICAgICAKICAgICMgICAgICAgIC0tICAgICAgQ1BVICAgICAgICAgICBOT1JNQUwgICAgICAgICAxMDUgICAgICAgICAgMTIwICAgICAgICAgICAgMzggICAgICAKICAgICMgICAgICAgIC0tICAgICAgTFNXICAgICAgICAgICBOT1JNQUwgICAgICAgICAxMDUgICAgICAgICAgMTIwICAgICAgICAgICAgNjAgICAgICAKICAgICMgICAgICAgIC0tICAgICAgTFNXICAgICAgICAgICBOT1JNQUwgICAgICAgICAxMDUgICAgICAgICAgMTIwICAgICAgICAgICAgNjIgICAgICAKICAgICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgICAgICAgZGV2aWNlID0gcmUuY29tcGlsZShyJyhcZCt8XFMrfFxzKylccysoXHMrfFxTKylccysoXFMrKVxzKyhcUyspXHMrKFxkKylccysoXGQrKVxzKyhcZCspJykKICAgICAgICB0ZW0gPSB7fQogICAgICAgIHJlcyA9IFtdCiAgICAgICAgZm9yIGwgaW4gbGluZXNbMV0uc3BsaXQoJ1xuJyk6CiAgICAgICAgICAgIGlmIGw6CiAgICAgICAgICAgICAgICBkZXZpY2VfbiA9IGRldmljZS5tYXRjaChsKQogICAgICAgICAgICAgICAgaWYgZGV2aWNlX246CiAgICAgICAgICAgICAgICAgICAgdGVtPXsKICAgICAgICAgICAgICAgICAgICAgICAgJ1N0YXR1cyc6ZGV2aWNlX24uZ3JvdXAoNCksCiAgICAgICAgICAgICAgICAgICAgICAgICdNYWpvcic6ZGV2aWNlX24uZ3JvdXAoNSksCiAgICAgICAgICAgICAgICAgICAgICAgICdDdXJyZW50JzpkZXZpY2Vfbi5ncm91cCg3KQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXMuYXBwZW5kKHRlbSkKCiAgICAgICAgZXJyX20gPSAiIgogICAgICAgICMgcmFpc2UgRXhjZXB0aW9uKHRlbSkKCiAgICAgICAgZXJyX3N0YXR1cyA9IFtdCiAgICAgICAgZm9yIGRldmljZXJ1IGluIHJlczoKICAgICAgICAgICAgaWYgICdOb3JtYWwnIGluIGRldmljZXJ1WydTdGF0dXMnXSA6CiAgICAgICAgICAgICAgICBpZiBpbnQoZGV2aWNlcnVbJ0N1cnJlbnQnXSkgPCBpbnQoZGV2aWNlcnVbJ01ham9yJ10pOiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZXJyX3N0YXR1cy5hcHBlbmQoJ1xu6K6+5aSH54q25oCBOnswfSDlvZPliY3muKnluqY6ezF9IDwg5rip5bqm6ZmQ5Yi2OnsyfSDnirbmgIHkuLrmraPluLgnLmZvcm1hdChkZXZpY2VydVsnU3RhdHVzJ10sZGV2aWNlcnVbJ0N1cnJlbnQnXSxkZXZpY2VydVsnTWFqb3InXSkpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGVycl9zdGF0dXMuYXBwZW5kKCdcbuiuvuWkh+eKtuaAgTp7MH0g5b2T5YmN5rip5bqmOnsxfSA+IOa4qeW6pumZkOWItjp7Mn0g54q25oCB5Li65LiN5q2j5bi4Jy5mb3JtYXQoZGV2aWNlcnVbJ1N0YXR1cyddLGRldmljZXJ1WydDdXJyZW50J10sZGV2aWNlcnVbJ01ham9yJ10pKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaWYgaW50KGRldmljZXJ1WydDdXJyZW50J10pIDwgaW50KGRldmljZXJ1WydNYWpvciddKTogICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGVycl9zdGF0dXMuYXBwZW5kKCdcbuiuvuWkh+eKtuaAgTp7MH0g5b2T5YmN5rip5bqmOnsxfSA8IOa4qeW6pumZkOWItjp7Mn0g54q25oCB5Li65q2j5bi4Jy5mb3JtYXQoZGV2aWNlcnVbJ1N0YXR1cyddLGRldmljZXJ1WydDdXJyZW50J10sZGV2aWNlcnVbJ01ham9yJ10pKSAKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgZXJyX3N0YXR1cy5hcHBlbmQoJ1xu6K6+5aSH54q25oCBOnswfSDlvZPliY3muKnluqY6ezF9ID4g5rip5bqm6ZmQ5Yi2OnsyfSDnirbmgIHkuLrkuI3mraPluLgnLmZvcm1hdChkZXZpY2VydVsnU3RhdHVzJ10sZGV2aWNlcnVbJ0N1cnJlbnQnXSxkZXZpY2VydVsnTWFqb3InXSkpCiAgICAgICAgaWYgZXJyX3N0YXR1czoKICAgICAgICAgICAgZXJyX20gPSBlcnJfbSArICfmg4XlhrXlpoLkuIvvvJp7fSBcbicuZm9ybWF0KCIsICIuam9pbihlcnJfc3RhdHVzKSkKICAgICAgICAgICAgcmVzdWx0WydkZXRhaWwnXSA9IGVycl9tCiAgICBlbHNlOgogICAgICAgIHJlc3VsdFsnbXNnJ109J+ivt+ajgOafpeWRveS7pOaYr+WQpumUmeivr+aIluiAheS4jeaUr+aMgScKICAgIHJldHVybiByZXN1bHQ=",
                "label": null,
                "authScope": "public",
                "args": null,
                "params": [],
                "description": "边缘云华为交换机温度检查",
                "beginDate": null,
                "endDate": null,
                "user": null,
                "authUser": null,
                "editable": "0"
            },
            {
                "id": "bdf1a86c7c33446fb2d50be2edcf0586",
                "createBy": "1",
                "createDate": "2021-12-10 14:52:23",
                "updateBy": "10112",
                "updateDate": "2023-02-22 11:41:32",
                "remarks": null,
                "orders": null,
                "isNewRecord": false,
                "name": "边缘云华为交换机设备接口状态检查",
                "type": "forward_online_script",
                "version": "1.0.2",
                "lang": "python",
                "code": "# dis interface brief\nimport re\n\n\n# version: Python3\n###################################################################################################\n# _task.args字典说明\n#     command: 发送到远端网络设备的命令。\n#\n# result字典说明:\n#     failed: 布尔值, 命令是否执行成功。\n#     stdout: 命令的标准输出。\n#     msg: 命令的错误输出。\n###################################################################################################\n# please edit your code here:\ndef main(self, task_vars):\n    self._task.args['command'] = 'display interface brief'\n    result = self.execute_cmd(task_vars)\n    lines = result.get('stdout').split(\"InUti OutUti   inErrors  outErrors\")\n\n    # (c): CFM down\n    # (sd): STP instance discarding\n    # InUti/OutUti: input utility rate/output utility rate\n    # Interface                  PHY      Protocol  InUti OutUti   inErrors  outErrors\n    # 100GE1/0/1                 *down    down         0%     0%          0          0\n    # 100GE1/0/2                 *down    down         0%     0%          0          0\n    # 10GE1/0/1                  up       up        0.01%  0.01%          0          0\n    # 10GE1/0/2                  up       up        0.01%  0.01%          0          0\n    # 10GE1/0/3                  up       up        0.01%  0.01%          0          0\n    # 10GE1/0/4                  up       up        0.01%  0.01%          0          0\n    # 10GE1/0/5                  up       up        0.01%  0.01%          0          0\n    # 10GE1/0/6                  up       up        0.01%  0.01%          0          0\n    # 10GE1/0/7                  up       up        0.01%  0.01%          0          0\n\n    device = re.compile(r'(\\d+\\S+|\\S+\\d)\\s+(\\S+)\\s+(\\S+)\\s+(\\d+\\S+)\\s+(\\d+\\S+)\\s+(\\d+)\\s+(\\d+)')\n    tem = {}\n    res = []\n    for l in lines[1].split('\\n'):\n        if l:\n            device_n = device.match(l)\n            if device_n:\n                tem = {\n                    'Interface': device_n.group(1),\n                    'PHY': device_n.group(2),\n                    'Protocol': device_n.group(3),\n                    'InUti': device_n.group(4),\n                    'OutUti': device_n.group(5),\n                    'inErrors': device_n.group(6),\n                    'outErrors': device_n.group(7)\n                }\n                res.append(tem)\n\n    err_m = \"\"\n\n    err_status = []\n    for deviceru in res:\n        if deviceru['inErrors'] == '0':\n            if deviceru['outErrors'] == '0':\n                if deviceru['InUti'] < \"40%\":\n                    if deviceru['OutUti'] < '40%':\n                        if deviceru['PHY'] == 'up':\n                            if deviceru['Protocol'] == 'up':\n                                err_status.append(\n                                    '\\nInterface:{0}状态为正常,无错包'.format(deviceru['Interface'], deviceru['InUti'],\n                                                                      deviceru['OutUti']))\n                            elif deviceru['Protocol'] == 'up(s)':\n                                err_status.append(\n                                    '\\nInterface:{0}状态为正常,无错包'.format(deviceru['Interface'], deviceru['InUti'],\n                                                                      deviceru['OutUti']))\n                            else:\n                                err_status.append('\\nInterface:{0}Protocol:{1}状态为不正常'.format(deviceru['Interface'],\n                                                                                             deviceru['Protocol']))\n                        elif deviceru['PHY'] == '*down':\n                            continue\n                        else:\n                            err_status.append(\n                                '\\nInterface:{0}PHY:{1}状态为不正常'.format(deviceru['Interface'], deviceru['PHY']))\n                    else:\n                        err_status.append(\n                            '\\nInterface:{0}OutUti:{1}状态为不正常'.format(deviceru['Interface'], deviceru['OutUti']))\n                else:\n                    err_status.append('\\nInterface:{0}InUti:{1}状态为不正常'.format(deviceru['Interface'], deviceru['InUti']))\n            else:\n                err_status.append(\n                    '\\nInterface:{0}outErrors:{1}状态为不正常'.format(deviceru['Interface'], deviceru['outErrors']))\n        else:\n            err_status.append('\\nInterface:{0}inErrors:{1}状态为不正常'.format(deviceru['Interface'], deviceru['inErrors']))\n\n    if err_status:\n        err_m = err_m + '情况如下：{} \\n'.format(\", \".join(err_status))\n        result['detail'] = err_m\n\n    return result",
                "base64Code": "IyBkaXMgaW50ZXJmYWNlIGJyaWVmCmltcG9ydCByZQoKCiMgdmVyc2lvbjogUHl0aG9uMwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBfdGFzay5hcmdz5a2X5YW46K+05piOCiMgICAgIGNvbW1hbmQ6IOWPkemAgeWIsOi/nOerr+e9kee7nOiuvuWkh+eahOWRveS7pOOAggojCiMgcmVzdWx05a2X5YW46K+05piOOgojICAgICBmYWlsZWQ6IOW4g+WwlOWAvCwg5ZG95Luk5piv5ZCm5omn6KGM5oiQ5Yqf44CCCiMgICAgIHN0ZG91dDog5ZG95Luk55qE5qCH5YeG6L6T5Ye644CCCiMgICAgIG1zZzog5ZG95Luk55qE6ZSZ6K+v6L6T5Ye644CCCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIHBsZWFzZSBlZGl0IHlvdXIgY29kZSBoZXJlOgpkZWYgbWFpbihzZWxmLCB0YXNrX3ZhcnMpOgogICAgc2VsZi5fdGFzay5hcmdzWydjb21tYW5kJ10gPSAnZGlzcGxheSBpbnRlcmZhY2UgYnJpZWYnCiAgICByZXN1bHQgPSBzZWxmLmV4ZWN1dGVfY21kKHRhc2tfdmFycykKICAgIGxpbmVzID0gcmVzdWx0LmdldCgnc3Rkb3V0Jykuc3BsaXQoIkluVXRpIE91dFV0aSAgIGluRXJyb3JzICBvdXRFcnJvcnMiKQoKICAgICMgKGMpOiBDRk0gZG93bgogICAgIyAoc2QpOiBTVFAgaW5zdGFuY2UgZGlzY2FyZGluZwogICAgIyBJblV0aS9PdXRVdGk6IGlucHV0IHV0aWxpdHkgcmF0ZS9vdXRwdXQgdXRpbGl0eSByYXRlCiAgICAjIEludGVyZmFjZSAgICAgICAgICAgICAgICAgIFBIWSAgICAgIFByb3RvY29sICBJblV0aSBPdXRVdGkgICBpbkVycm9ycyAgb3V0RXJyb3JzCiAgICAjIDEwMEdFMS8wLzEgICAgICAgICAgICAgICAgICpkb3duICAgIGRvd24gICAgICAgICAwJSAgICAgMCUgICAgICAgICAgMCAgICAgICAgICAwCiAgICAjIDEwMEdFMS8wLzIgICAgICAgICAgICAgICAgICpkb3duICAgIGRvd24gICAgICAgICAwJSAgICAgMCUgICAgICAgICAgMCAgICAgICAgICAwCiAgICAjIDEwR0UxLzAvMSAgICAgICAgICAgICAgICAgIHVwICAgICAgIHVwICAgICAgICAwLjAxJSAgMC4wMSUgICAgICAgICAgMCAgICAgICAgICAwCiAgICAjIDEwR0UxLzAvMiAgICAgICAgICAgICAgICAgIHVwICAgICAgIHVwICAgICAgICAwLjAxJSAgMC4wMSUgICAgICAgICAgMCAgICAgICAgICAwCiAgICAjIDEwR0UxLzAvMyAgICAgICAgICAgICAgICAgIHVwICAgICAgIHVwICAgICAgICAwLjAxJSAgMC4wMSUgICAgICAgICAgMCAgICAgICAgICAwCiAgICAjIDEwR0UxLzAvNCAgICAgICAgICAgICAgICAgIHVwICAgICAgIHVwICAgICAgICAwLjAxJSAgMC4wMSUgICAgICAgICAgMCAgICAgICAgICAwCiAgICAjIDEwR0UxLzAvNSAgICAgICAgICAgICAgICAgIHVwICAgICAgIHVwICAgICAgICAwLjAxJSAgMC4wMSUgICAgICAgICAgMCAgICAgICAgICAwCiAgICAjIDEwR0UxLzAvNiAgICAgICAgICAgICAgICAgIHVwICAgICAgIHVwICAgICAgICAwLjAxJSAgMC4wMSUgICAgICAgICAgMCAgICAgICAgICAwCiAgICAjIDEwR0UxLzAvNyAgICAgICAgICAgICAgICAgIHVwICAgICAgIHVwICAgICAgICAwLjAxJSAgMC4wMSUgICAgICAgICAgMCAgICAgICAgICAwCgogICAgZGV2aWNlID0gcmUuY29tcGlsZShyJyhcZCtcUyt8XFMrXGQpXHMrKFxTKylccysoXFMrKVxzKyhcZCtcUyspXHMrKFxkK1xTKylccysoXGQrKVxzKyhcZCspJykKICAgIHRlbSA9IHt9CiAgICByZXMgPSBbXQogICAgZm9yIGwgaW4gbGluZXNbMV0uc3BsaXQoJ1xuJyk6CiAgICAgICAgaWYgbDoKICAgICAgICAgICAgZGV2aWNlX24gPSBkZXZpY2UubWF0Y2gobCkKICAgICAgICAgICAgaWYgZGV2aWNlX246CiAgICAgICAgICAgICAgICB0ZW0gPSB7CiAgICAgICAgICAgICAgICAgICAgJ0ludGVyZmFjZSc6IGRldmljZV9uLmdyb3VwKDEpLAogICAgICAgICAgICAgICAgICAgICdQSFknOiBkZXZpY2Vfbi5ncm91cCgyKSwKICAgICAgICAgICAgICAgICAgICAnUHJvdG9jb2wnOiBkZXZpY2Vfbi5ncm91cCgzKSwKICAgICAgICAgICAgICAgICAgICAnSW5VdGknOiBkZXZpY2Vfbi5ncm91cCg0KSwKICAgICAgICAgICAgICAgICAgICAnT3V0VXRpJzogZGV2aWNlX24uZ3JvdXAoNSksCiAgICAgICAgICAgICAgICAgICAgJ2luRXJyb3JzJzogZGV2aWNlX24uZ3JvdXAoNiksCiAgICAgICAgICAgICAgICAgICAgJ291dEVycm9ycyc6IGRldmljZV9uLmdyb3VwKDcpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXMuYXBwZW5kKHRlbSkKCiAgICBlcnJfbSA9ICIiCgogICAgZXJyX3N0YXR1cyA9IFtdCiAgICBmb3IgZGV2aWNlcnUgaW4gcmVzOgogICAgICAgIGlmIGRldmljZXJ1WydpbkVycm9ycyddID09ICcwJzoKICAgICAgICAgICAgaWYgZGV2aWNlcnVbJ291dEVycm9ycyddID09ICcwJzoKICAgICAgICAgICAgICAgIGlmIGRldmljZXJ1WydJblV0aSddIDwgIjQwJSI6CiAgICAgICAgICAgICAgICAgICAgaWYgZGV2aWNlcnVbJ091dFV0aSddIDwgJzQwJSc6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGRldmljZXJ1WydQSFknXSA9PSAndXAnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgZGV2aWNlcnVbJ1Byb3RvY29sJ10gPT0gJ3VwJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJfc3RhdHVzLmFwcGVuZCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xuSW50ZXJmYWNlOnswfeeKtuaAgeS4uuato+W4uCzml6DplJnljIUnLmZvcm1hdChkZXZpY2VydVsnSW50ZXJmYWNlJ10sIGRldmljZXJ1WydJblV0aSddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlcnVbJ091dFV0aSddKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgZGV2aWNlcnVbJ1Byb3RvY29sJ10gPT0gJ3VwKHMpJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJfc3RhdHVzLmFwcGVuZCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xuSW50ZXJmYWNlOnswfeeKtuaAgeS4uuato+W4uCzml6DplJnljIUnLmZvcm1hdChkZXZpY2VydVsnSW50ZXJmYWNlJ10sIGRldmljZXJ1WydJblV0aSddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlcnVbJ091dFV0aSddKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyX3N0YXR1cy5hcHBlbmQoJ1xuSW50ZXJmYWNlOnswfVByb3RvY29sOnsxfeeKtuaAgeS4uuS4jeato+W4uCcuZm9ybWF0KGRldmljZXJ1WydJbnRlcmZhY2UnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlcnVbJ1Byb3RvY29sJ10pKQogICAgICAgICAgICAgICAgICAgICAgICBlbGlmIGRldmljZXJ1WydQSFknXSA9PSAnKmRvd24nOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycl9zdGF0dXMuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcbkludGVyZmFjZTp7MH1QSFk6ezF954q25oCB5Li65LiN5q2j5bi4Jy5mb3JtYXQoZGV2aWNlcnVbJ0ludGVyZmFjZSddLCBkZXZpY2VydVsnUEhZJ10pKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIGVycl9zdGF0dXMuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xuSW50ZXJmYWNlOnswfU91dFV0aTp7MX3nirbmgIHkuLrkuI3mraPluLgnLmZvcm1hdChkZXZpY2VydVsnSW50ZXJmYWNlJ10sIGRldmljZXJ1WydPdXRVdGknXSkpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGVycl9zdGF0dXMuYXBwZW5kKCdcbkludGVyZmFjZTp7MH1JblV0aTp7MX3nirbmgIHkuLrkuI3mraPluLgnLmZvcm1hdChkZXZpY2VydVsnSW50ZXJmYWNlJ10sIGRldmljZXJ1WydJblV0aSddKSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGVycl9zdGF0dXMuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICdcbkludGVyZmFjZTp7MH1vdXRFcnJvcnM6ezF954q25oCB5Li65LiN5q2j5bi4Jy5mb3JtYXQoZGV2aWNlcnVbJ0ludGVyZmFjZSddLCBkZXZpY2VydVsnb3V0RXJyb3JzJ10pKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGVycl9zdGF0dXMuYXBwZW5kKCdcbkludGVyZmFjZTp7MH1pbkVycm9yczp7MX3nirbmgIHkuLrkuI3mraPluLgnLmZvcm1hdChkZXZpY2VydVsnSW50ZXJmYWNlJ10sIGRldmljZXJ1WydpbkVycm9ycyddKSkKCiAgICBpZiBlcnJfc3RhdHVzOgogICAgICAgIGVycl9tID0gZXJyX20gKyAn5oOF5Ya15aaC5LiL77yae30gXG4nLmZvcm1hdCgiLCAiLmpvaW4oZXJyX3N0YXR1cykpCiAgICAgICAgcmVzdWx0WydkZXRhaWwnXSA9IGVycl9tCgogICAgcmV0dXJuIHJlc3VsdA==",
                "label": null,
                "authScope": "public",
                "args": null,
                "params": [],
                "description": "边缘云华为交换机设备接口状态检查",
                "beginDate": null,
                "endDate": null,
                "user": null,
                "authUser": null,
                "editable": "0"
            },
            {
                "id": "e5b4c94a309c498fb01bd0fbc243cf8d",
                "createBy": "1",
                "createDate": "2021-12-10 15:25:49",
                "updateBy": "10112",
                "updateDate": "2023-02-22 11:35:44",
                "remarks": null,
                "orders": null,
                "isNewRecord": false,
                "name": "边缘云华为交换机告警检查",
                "type": "forward_online_script",
                "version": "1.0.3",
                "lang": "python",
                "code": "#HWdis debugging\n\nimport re\n# version: Python3\n###################################################################################################\n# _task.args字典说明\n#     command: 发送到远端网络设备的命令。\n#\n# result字典说明:\n#     failed: 布尔值, 命令是否执行成功。\n#     stdout: 命令的标准输出。\n#     msg: 命令的错误输出。\n###################################################################################################\n# please edit your code here:\ndef main(self, task_vars):\n    self._task.args['command'] = 'display alarm ac'\n    result = self.execute_cmd(task_vars)\n    org_msg = result.get('stdout', '')\n    err_status = []\n    err_m = \"\" \n\n    lines = result.get('stdout')\n    if lines == '':\n        err_status.append('\\n状态为正常，当前无告警')\n    elif  'You do not have permission to run' in lines:\n        err_status.append('\\n执行权限不足')  \n    else:\n        err_status.append('\\n状态为不正常，当前存在告警，请进行核查')\n    \n    \n    if err_status:\n        err_m = err_m + '情况如下：{} \\n'.format(\", \".join(err_status))\n        result['detail'] = err_m\n    result['stdout'] = org_msg\n    return result",
                "base64Code": "I0hXZGlzIGRlYnVnZ2luZwoKaW1wb3J0IHJlCiMgdmVyc2lvbjogUHl0aG9uMwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBfdGFzay5hcmdz5a2X5YW46K+05piOCiMgICAgIGNvbW1hbmQ6IOWPkemAgeWIsOi/nOerr+e9kee7nOiuvuWkh+eahOWRveS7pOOAggojCiMgcmVzdWx05a2X5YW46K+05piOOgojICAgICBmYWlsZWQ6IOW4g+WwlOWAvCwg5ZG95Luk5piv5ZCm5omn6KGM5oiQ5Yqf44CCCiMgICAgIHN0ZG91dDog5ZG95Luk55qE5qCH5YeG6L6T5Ye644CCCiMgICAgIG1zZzog5ZG95Luk55qE6ZSZ6K+v6L6T5Ye644CCCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIHBsZWFzZSBlZGl0IHlvdXIgY29kZSBoZXJlOgpkZWYgbWFpbihzZWxmLCB0YXNrX3ZhcnMpOgogICAgc2VsZi5fdGFzay5hcmdzWydjb21tYW5kJ10gPSAnZGlzcGxheSBhbGFybSBhYycKICAgIHJlc3VsdCA9IHNlbGYuZXhlY3V0ZV9jbWQodGFza192YXJzKQogICAgb3JnX21zZyA9IHJlc3VsdC5nZXQoJ3N0ZG91dCcsICcnKQogICAgZXJyX3N0YXR1cyA9IFtdCiAgICBlcnJfbSA9ICIiIAoKICAgIGxpbmVzID0gcmVzdWx0LmdldCgnc3Rkb3V0JykKICAgIGlmIGxpbmVzID09ICcnOgogICAgICAgIGVycl9zdGF0dXMuYXBwZW5kKCdcbueKtuaAgeS4uuato+W4uO+8jOW9k+WJjeaXoOWRiuitpicpCiAgICBlbGlmICAnWW91IGRvIG5vdCBoYXZlIHBlcm1pc3Npb24gdG8gcnVuJyBpbiBsaW5lczoKICAgICAgICBlcnJfc3RhdHVzLmFwcGVuZCgnXG7miafooYzmnYPpmZDkuI3otrMnKSAgCiAgICBlbHNlOgogICAgICAgIGVycl9zdGF0dXMuYXBwZW5kKCdcbueKtuaAgeS4uuS4jeato+W4uO+8jOW9k+WJjeWtmOWcqOWRiuitpu+8jOivt+i/m+ihjOaguOafpScpCiAgICAKICAgIAogICAgaWYgZXJyX3N0YXR1czoKICAgICAgICBlcnJfbSA9IGVycl9tICsgJ+aDheWGteWmguS4i++8mnt9IFxuJy5mb3JtYXQoIiwgIi5qb2luKGVycl9zdGF0dXMpKQogICAgICAgIHJlc3VsdFsnZGV0YWlsJ10gPSBlcnJfbQogICAgcmVzdWx0WydzdGRvdXQnXSA9IG9yZ19tc2cKICAgIHJldHVybiByZXN1bHQ=",
                "label": null,
                "authScope": "public",
                "args": null,
                "params": [],
                "description": "边缘云华为交换机告警检查",
                "beginDate": null,
                "endDate": null,
                "user": null,
                "authUser": null,
                "editable": "0"
            },
            {
                "id": "2187c3a1960647c8bdb5a007434042c4",
                "createBy": "10036",
                "createDate": "2022-11-02 17:23:39",
                "updateBy": "10036",
                "updateDate": "2022-11-02 17:29:15",
                "remarks": null,
                "orders": null,
                "isNewRecord": false,
                "name": "数通指令采集模板",
                "type": "forward_online_script",
                "version": "1.0.1",
                "lang": "python",
                "code": "# version: Python3\n###################################################################################################\n# _task.args字典说明\n#     command: 发送到远端网络设备的命令。\n#\n# result字典说明:\n#     failed: 布尔值, 命令是否执行成功。\n#     stdout: 命令的标准输出。\n#     msg: 命令的错误输出。\n###################################################################################################\n# please edit your code here:\ndef main(self, task_vars):\n    commands = [\n        \"display current\",\n        \"display lldp neighbor brief\",\n    ]\n    log_list = []\n    for cmd in commands:\n        self._task.args['command'] = cmd\n        result = self.execute_cmd(task_vars)\n        log = result.get(\"stdout\")\n        log_list.append(log)\n    result = {\n        'rc': 0,\n        'stdout': \"\\n\".join(log_list)\n    }\n    return result",
                "base64Code": "IyB2ZXJzaW9uOiBQeXRob24zCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIF90YXNrLmFyZ3PlrZflhbjor7TmmI4KIyAgICAgY29tbWFuZDog5Y+R6YCB5Yiw6L+c56uv572R57uc6K6+5aSH55qE5ZG95Luk44CCCiMKIyByZXN1bHTlrZflhbjor7TmmI46CiMgICAgIGZhaWxlZDog5biD5bCU5YC8LCDlkb3ku6TmmK/lkKbmiafooYzmiJDlip/jgIIKIyAgICAgc3Rkb3V0OiDlkb3ku6TnmoTmoIflh4bovpPlh7rjgIIKIyAgICAgbXNnOiDlkb3ku6TnmoTplJnor6/ovpPlh7rjgIIKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgcGxlYXNlIGVkaXQgeW91ciBjb2RlIGhlcmU6CmRlZiBtYWluKHNlbGYsIHRhc2tfdmFycyk6CiAgICBjb21tYW5kcyA9IFsKICAgICAgICAiZGlzcGxheSBjdXJyZW50IiwKICAgICAgICAiZGlzcGxheSBsbGRwIG5laWdoYm9yIGJyaWVmIiwKICAgIF0KICAgIGxvZ19saXN0ID0gW10KICAgIGZvciBjbWQgaW4gY29tbWFuZHM6CiAgICAgICAgc2VsZi5fdGFzay5hcmdzWydjb21tYW5kJ10gPSBjbWQKICAgICAgICByZXN1bHQgPSBzZWxmLmV4ZWN1dGVfY21kKHRhc2tfdmFycykKICAgICAgICBsb2cgPSByZXN1bHQuZ2V0KCJzdGRvdXQiKQogICAgICAgIGxvZ19saXN0LmFwcGVuZChsb2cpCiAgICByZXN1bHQgPSB7CiAgICAgICAgJ3JjJzogMCwKICAgICAgICAnc3Rkb3V0JzogIlxuIi5qb2luKGxvZ19saXN0KQogICAgfQogICAgcmV0dXJuIHJlc3VsdA==",
                "label": null,
                "authScope": "public",
                "args": null,
                "params": [],
                "description": "",
                "beginDate": null,
                "endDate": null,
                "user": null,
                "authUser": null,
                "editable": "0"
            },
            {
                "id": "a089c48d2e3c49cdac1c01fe4e06744b",
                "createBy": "10058",
                "createDate": "2022-06-29 15:31:21",
                "updateBy": "10058",
                "updateDate": "2022-08-18 14:13:02",
                "remarks": null,
                "orders": null,
                "isNewRecord": false,
                "name": "服务器检查网卡错包",
                "type": "action_script",
                "version": "1.0.2",
                "lang": "python",
                "code": "import re\nimport json\n# version: Python3\n###################################################################################################\n#调试打印变量：\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n#    var = \"test\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n#\t raise Exception(var)\n#result字典说明：\n#\t result[\"rc\"]: 0或1，0表示指令执行成功，1表示指令执行失败\n#\t result[\"failed\"]: 脚本执行状态(对应用status)，True或False,设置该值可以定义脚本成功或失败\n# \t result[\"stdout\"]: 指令执行成功时的输出数据(对应用originalMsg)\n#    result[\"stderr\"]：指令执行出错时的描述信息\n#    result[\"msg\"]：用户自定义的错误描述信息(脚本失败时对应detail)，如巡检CPU指标异常\n###################################################################################################\n# please edit your code here:\ndef main(self, task_vars):\n    self._task.args['_raw_params'] = 'ifconfig'\n    result = self.execute_cmd(task_vars)\n    a = result['stdout']\n    \n    trx = re.compile(r\"(\\S+): flags[\\s\\S]+?RX errors\\s+(\\d+)\\s+dropped\\s+(\\d+)[\\s\\S]+?TX errors\\s+(\\d+)\\s+dropped\\s+(\\d+)\")\n    trxfaultcount= trx.findall(a)\n    result['stdout']=\"不存在误码或丢包的情况\"\n    errorstring=\"\"\n    for item in trxfaultcount:\t\n        card=item[0]\n        rx_error=int(item[1])\n        rx_dropped=int(item[2])\n        tx_error=int(item[3])\n        tx_dropped=int(item[4])\n        if rx_error>100 or rx_dropped>100 or tx_error>100 or tx_dropped>100:\n            errorstring=errorstring+\"%s:RX errors %s,dropped %s;TX errors %s,dropped %s\\n\" %(card,rx_error,rx_dropped,tx_error,tx_dropped)\n    \n    if errorstring==\"\":\n        result['stdout']=\"不存在误码或丢包的情况\"\n    else:\n        result['stdout']=\"存在误码或丢包的情况。\\r\\n\"+errorstring\n    return result\n",
                "base64Code": "aW1wb3J0IHJlCmltcG9ydCBqc29uCiMgdmVyc2lvbjogUHl0aG9uMwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKI+iwg+ivleaJk+WNsOWPmOmHj++8mgkJCQkJCQkJCQkJCQkJCQkJCQkKIyAgICB2YXIgPSAidGVzdCIJCQkJCQkJCQkJCQkJCQkJCQkJCiMJIHJhaXNlIEV4Y2VwdGlvbih2YXIpCiNyZXN1bHTlrZflhbjor7TmmI7vvJoKIwkgcmVzdWx0WyJyYyJdOiAw5oiWMe+8jDDooajnpLrmjIfku6TmiafooYzmiJDlip/vvIwx6KGo56S65oyH5Luk5omn6KGM5aSx6LSlCiMJIHJlc3VsdFsiZmFpbGVkIl06IOiEmuacrOaJp+ihjOeKtuaAgSjlr7nlupTnlKhzdGF0dXMp77yMVHJ1ZeaIlkZhbHNlLOiuvue9ruivpeWAvOWPr+S7peWumuS5ieiEmuacrOaIkOWKn+aIluWksei0pQojIAkgcmVzdWx0WyJzdGRvdXQiXTog5oyH5Luk5omn6KGM5oiQ5Yqf5pe255qE6L6T5Ye65pWw5o2uKOWvueW6lOeUqG9yaWdpbmFsTXNnKQojICAgIHJlc3VsdFsic3RkZXJyIl3vvJrmjIfku6TmiafooYzlh7rplJnml7bnmoTmj4/ov7Dkv6Hmga8KIyAgICByZXN1bHRbIm1zZyJd77ya55So5oi36Ieq5a6a5LmJ55qE6ZSZ6K+v5o+P6L+w5L+h5oGvKOiEmuacrOWksei0peaXtuWvueW6lGRldGFpbCnvvIzlpoLlt6Hmo4BDUFXmjIfmoIflvILluLgKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgcGxlYXNlIGVkaXQgeW91ciBjb2RlIGhlcmU6CmRlZiBtYWluKHNlbGYsIHRhc2tfdmFycyk6CiAgICBzZWxmLl90YXNrLmFyZ3NbJ19yYXdfcGFyYW1zJ10gPSAnaWZjb25maWcnCiAgICByZXN1bHQgPSBzZWxmLmV4ZWN1dGVfY21kKHRhc2tfdmFycykKICAgIGEgPSByZXN1bHRbJ3N0ZG91dCddCiAgICAKICAgIHRyeCA9IHJlLmNvbXBpbGUociIoXFMrKTogZmxhZ3NbXHNcU10rP1JYIGVycm9yc1xzKyhcZCspXHMrZHJvcHBlZFxzKyhcZCspW1xzXFNdKz9UWCBlcnJvcnNccysoXGQrKVxzK2Ryb3BwZWRccysoXGQrKSIpCiAgICB0cnhmYXVsdGNvdW50PSB0cnguZmluZGFsbChhKQogICAgcmVzdWx0WydzdGRvdXQnXT0i5LiN5a2Y5Zyo6K+v56CB5oiW5Lii5YyF55qE5oOF5Ya1IgogICAgZXJyb3JzdHJpbmc9IiIKICAgIGZvciBpdGVtIGluIHRyeGZhdWx0Y291bnQ6CQogICAgICAgIGNhcmQ9aXRlbVswXQogICAgICAgIHJ4X2Vycm9yPWludChpdGVtWzFdKQogICAgICAgIHJ4X2Ryb3BwZWQ9aW50KGl0ZW1bMl0pCiAgICAgICAgdHhfZXJyb3I9aW50KGl0ZW1bM10pCiAgICAgICAgdHhfZHJvcHBlZD1pbnQoaXRlbVs0XSkKICAgICAgICBpZiByeF9lcnJvcj4xMDAgb3IgcnhfZHJvcHBlZD4xMDAgb3IgdHhfZXJyb3I+MTAwIG9yIHR4X2Ryb3BwZWQ+MTAwOgogICAgICAgICAgICBlcnJvcnN0cmluZz1lcnJvcnN0cmluZysiJXM6UlggZXJyb3JzICVzLGRyb3BwZWQgJXM7VFggZXJyb3JzICVzLGRyb3BwZWQgJXNcbiIgJShjYXJkLHJ4X2Vycm9yLHJ4X2Ryb3BwZWQsdHhfZXJyb3IsdHhfZHJvcHBlZCkKICAgIAogICAgaWYgZXJyb3JzdHJpbmc9PSIiOgogICAgICAgIHJlc3VsdFsnc3Rkb3V0J109IuS4jeWtmOWcqOivr+eggeaIluS4ouWMheeahOaDheWGtSIKICAgIGVsc2U6CiAgICAgICAgcmVzdWx0WydzdGRvdXQnXT0i5a2Y5Zyo6K+v56CB5oiW5Lii5YyF55qE5oOF5Ya144CCXHJcbiIrZXJyb3JzdHJpbmcKICAgIHJldHVybiByZXN1bHQK",
                "label": null,
                "authScope": "public",
                "args": null,
                "params": [],
                "description": "服务器检查网卡错包",
                "beginDate": null,
                "endDate": null,
                "user": null,
                "authUser": null,
                "editable": "0"
            },
            {
                "id": "e7a244f8b4654adfb5226a01ac36d4f8",
                "createBy": "10058",
                "createDate": "2022-06-29 14:50:31",
                "updateBy": "10058",
                "updateDate": "2022-08-18 14:08:59",
                "remarks": null,
                "orders": null,
                "isNewRecord": false,
                "name": "服务器检查系统内核版本",
                "type": "action_script",
                "version": "1.0.1",
                "lang": "python",
                "code": "import re\nimport json\n# version: Python3\n###################################################################################################\n#调试打印变量：\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n#    var = \"test\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n#\t raise Exception(var)\n#result字典说明：\n#\t result[\"rc\"]: 0或1，0表示指令执行成功，1表示指令执行失败\n#\t result[\"failed\"]: 脚本执行状态(对应用status)，True或False,设置该值可以定义脚本成功或失败\n# \t result[\"stdout\"]: 指令执行成功时的输出数据(对应用originalMsg)\n#    result[\"stderr\"]：指令执行出错时的描述信息\n#    result[\"msg\"]：用户自定义的错误描述信息(脚本失败时对应detail)，如巡检CPU指标异常\n###################################################################################################\n# please edit your code here:\ndef main(self, task_vars):\n    self._task.args['_raw_params'] = 'uname -r'\n    result = self.execute_cmd(task_vars)\n    a = result['stdout']\n    \n    trx = re.compile(r\".\")    #  total        used        free  \n    vers= trx.findall(a)    \n    if len(vers)>0:\n        result[\"rc\"]=0\n        result['stdout'] = \"查询到系统版本为:\\n%s\" %a\n    else:\n        result[\"rc\"]=1\n        result['stdout'] = \"不能查询到系统版本信息\"\n    return result\n",
                "base64Code": "aW1wb3J0IHJlCmltcG9ydCBqc29uCiMgdmVyc2lvbjogUHl0aG9uMwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKI+iwg+ivleaJk+WNsOWPmOmHj++8mgkJCQkJCQkJCQkJCQkJCQkJCQkKIyAgICB2YXIgPSAidGVzdCIJCQkJCQkJCQkJCQkJCQkJCQkJCiMJIHJhaXNlIEV4Y2VwdGlvbih2YXIpCiNyZXN1bHTlrZflhbjor7TmmI7vvJoKIwkgcmVzdWx0WyJyYyJdOiAw5oiWMe+8jDDooajnpLrmjIfku6TmiafooYzmiJDlip/vvIwx6KGo56S65oyH5Luk5omn6KGM5aSx6LSlCiMJIHJlc3VsdFsiZmFpbGVkIl06IOiEmuacrOaJp+ihjOeKtuaAgSjlr7nlupTnlKhzdGF0dXMp77yMVHJ1ZeaIlkZhbHNlLOiuvue9ruivpeWAvOWPr+S7peWumuS5ieiEmuacrOaIkOWKn+aIluWksei0pQojIAkgcmVzdWx0WyJzdGRvdXQiXTog5oyH5Luk5omn6KGM5oiQ5Yqf5pe255qE6L6T5Ye65pWw5o2uKOWvueW6lOeUqG9yaWdpbmFsTXNnKQojICAgIHJlc3VsdFsic3RkZXJyIl3vvJrmjIfku6TmiafooYzlh7rplJnml7bnmoTmj4/ov7Dkv6Hmga8KIyAgICByZXN1bHRbIm1zZyJd77ya55So5oi36Ieq5a6a5LmJ55qE6ZSZ6K+v5o+P6L+w5L+h5oGvKOiEmuacrOWksei0peaXtuWvueW6lGRldGFpbCnvvIzlpoLlt6Hmo4BDUFXmjIfmoIflvILluLgKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgcGxlYXNlIGVkaXQgeW91ciBjb2RlIGhlcmU6CmRlZiBtYWluKHNlbGYsIHRhc2tfdmFycyk6CiAgICBzZWxmLl90YXNrLmFyZ3NbJ19yYXdfcGFyYW1zJ10gPSAndW5hbWUgLXInCiAgICByZXN1bHQgPSBzZWxmLmV4ZWN1dGVfY21kKHRhc2tfdmFycykKICAgIGEgPSByZXN1bHRbJ3N0ZG91dCddCiAgICAKICAgIHRyeCA9IHJlLmNvbXBpbGUociIuIikgICAgIyAgdG90YWwgICAgICAgIHVzZWQgICAgICAgIGZyZWUgIAogICAgdmVycz0gdHJ4LmZpbmRhbGwoYSkgICAgCiAgICBpZiBsZW4odmVycyk+MDoKICAgICAgICByZXN1bHRbInJjIl09MAogICAgICAgIHJlc3VsdFsnc3Rkb3V0J10gPSAi5p+l6K+i5Yiw57O757uf54mI5pys5Li6OlxuJXMiICVhCiAgICBlbHNlOgogICAgICAgIHJlc3VsdFsicmMiXT0xCiAgICAgICAgcmVzdWx0WydzdGRvdXQnXSA9ICLkuI3og73mn6Xor6LliLDns7vnu5/niYjmnKzkv6Hmga8iCiAgICByZXR1cm4gcmVzdWx0Cg==",
                "label": null,
                "authScope": "public",
                "args": null,
                "params": [],
                "description": "服务器检查系统内核版本",
                "beginDate": null,
                "endDate": null,
                "user": null,
                "authUser": null,
                "editable": "0"
            },
            {
                "id": "638bba8050774f93bc0b7e27bd113030",
                "createBy": "10058",
                "createDate": "2022-08-15 11:49:41",
                "updateBy": "10058",
                "updateDate": "2022-08-18 14:05:02",
                "remarks": null,
                "orders": null,
                "isNewRecord": false,
                "name": "服务器检查内存状态",
                "type": "action_script",
                "version": "1.1.2",
                "lang": "python",
                "code": "# version: Python3\n###################################################################################################\n#调试打印变量：\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n#    var = \"test\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n#\t raise Exception(var)\n#result字典说明：\n#\t result[\"rc\"]: 0或1，0表示指令执行成功，1表示指令执行失败\n#\t result[\"failed\"]: 脚本执行状态(对应用status)，True或False,设置该值可以定义脚本成功或失败\n# \t result[\"stdout\"]: 指令执行成功时的输出数据(对应用originalMsg)\n#    result[\"stderr\"]：指令执行出错时的描述信息\n#    result[\"msg\"]：用户自定义的错误描述信息(脚本失败时对应detail)，如巡检CPU指标异常\n###################################################################################################\n# please edit your code here:\nimport binascii\nimport re\nimport json\ndef main(self, task_vars):\n    # 获取设备BMC IP\n    bmc_ip = task_vars.get(\"ansible_bmc_ip\", \"\")\n    # 获取设备的BMC账号\n    bmc_user = task_vars.get(\"ansible_bmc_user\", \"\")\n    # 获取设备的BMC密码\n    bmc_pass = task_vars.get(\"ansible_bmc_pass\", \"\")\n    # 构建指令\n    self._task.args['_raw_params'] = 'ipmitool -I lanplus -H {} -U {} -P {} sdr elist | grep -E \"(MEM|DIMM)\"  '.format(bmc_ip, bmc_user, bmc_pass)\n    # 执行指令\n    result = self.execute_cmd(task_vars)\n    rpt = result['stdout']\n    reg_var = re.compile(r\"((?:MEM|DIMM)[^\\r\\n|]*) *\\| *[^\\r\\n\\|]+? *\\| *([^\\r\\n\\|]+?) *\\| *([^\\r\\n\\|]+?) *\\| *([^\\r\\n]+)\")\n    DIMM_state= reg_var.findall(rpt)\n\t\n    # raise Exception(result)\n    stdout=\"\"\n    if len(DIMM_state)>0:\n        result[\"rc\"]=0\n        error_state_Flag = False\n        stdout=\"\"\n        #stdout=json.dumps(DIMM_state)\n        for dimm in DIMM_state:\n            if dimm[1].upper()!=\"OK\":\n                error_state_Flag=True\n                stdout =stdout + \"%s：%s,%s\\n\" %(dimm[0],dimm[1],dimm[3])\n\t\t\t\t\n        if error_state_Flag:\n            stdout =\"服务器内存检测到异常状态.\\n\" + stdout\n        else:\n            stdout =\"检查服务器内存状态正常.\"\n    else:\n        #result[\"rc\"]=1\n        stdout = \"查询不到DIMM信息\"\n        \n    result = rsFormat(stdout,result)\n    # 返回执行结果\n    return result\n\n# 规则化输出结果\ndef rsFormat(stdout, result):\n    # todo\n    result[\"rc\"] = 0\n    result[\"failed\"] = False\n    result[\"stdout\"] = stdout\n    return result",
                "base64Code": "IyB2ZXJzaW9uOiBQeXRob24zCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoj6LCD6K+V5omT5Y2w5Y+Y6YeP77yaCQkJCQkJCQkJCQkJCQkJCQkJCQojICAgIHZhciA9ICJ0ZXN0IgkJCQkJCQkJCQkJCQkJCQkJCQkKIwkgcmFpc2UgRXhjZXB0aW9uKHZhcikKI3Jlc3VsdOWtl+WFuOivtOaYju+8mgojCSByZXN1bHRbInJjIl06IDDmiJYx77yMMOihqOekuuaMh+S7pOaJp+ihjOaIkOWKn++8jDHooajnpLrmjIfku6TmiafooYzlpLHotKUKIwkgcmVzdWx0WyJmYWlsZWQiXTog6ISa5pys5omn6KGM54q25oCBKOWvueW6lOeUqHN0YXR1cynvvIxUcnVl5oiWRmFsc2Us6K6+572u6K+l5YC85Y+v5Lul5a6a5LmJ6ISa5pys5oiQ5Yqf5oiW5aSx6LSlCiMgCSByZXN1bHRbInN0ZG91dCJdOiDmjIfku6TmiafooYzmiJDlip/ml7bnmoTovpPlh7rmlbDmja4o5a+55bqU55Sob3JpZ2luYWxNc2cpCiMgICAgcmVzdWx0WyJzdGRlcnIiXe+8muaMh+S7pOaJp+ihjOWHuumUmeaXtueahOaPj+i/sOS/oeaBrwojICAgIHJlc3VsdFsibXNnIl3vvJrnlKjmiLfoh6rlrprkuYnnmoTplJnor6/mj4/ov7Dkv6Hmga8o6ISa5pys5aSx6LSl5pe25a+55bqUZGV0YWlsKe+8jOWmguW3oeajgENQVeaMh+agh+W8guW4uAojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBwbGVhc2UgZWRpdCB5b3VyIGNvZGUgaGVyZToKaW1wb3J0IGJpbmFzY2lpCmltcG9ydCByZQppbXBvcnQganNvbgpkZWYgbWFpbihzZWxmLCB0YXNrX3ZhcnMpOgogICAgIyDojrflj5borr7lpIdCTUMgSVAKICAgIGJtY19pcCA9IHRhc2tfdmFycy5nZXQoImFuc2libGVfYm1jX2lwIiwgIiIpCiAgICAjIOiOt+WPluiuvuWkh+eahEJNQ+i0puWPtwogICAgYm1jX3VzZXIgPSB0YXNrX3ZhcnMuZ2V0KCJhbnNpYmxlX2JtY191c2VyIiwgIiIpCiAgICAjIOiOt+WPluiuvuWkh+eahEJNQ+WvhueggQogICAgYm1jX3Bhc3MgPSB0YXNrX3ZhcnMuZ2V0KCJhbnNpYmxlX2JtY19wYXNzIiwgIiIpCiAgICAjIOaehOW7uuaMh+S7pAogICAgc2VsZi5fdGFzay5hcmdzWydfcmF3X3BhcmFtcyddID0gJ2lwbWl0b29sIC1JIGxhbnBsdXMgLUgge30gLVUge30gLVAge30gc2RyIGVsaXN0IHwgZ3JlcCAtRSAiKE1FTXxESU1NKSIgICcuZm9ybWF0KGJtY19pcCwgYm1jX3VzZXIsIGJtY19wYXNzKQogICAgIyDmiafooYzmjIfku6QKICAgIHJlc3VsdCA9IHNlbGYuZXhlY3V0ZV9jbWQodGFza192YXJzKQogICAgcnB0ID0gcmVzdWx0WydzdGRvdXQnXQogICAgcmVnX3ZhciA9IHJlLmNvbXBpbGUociIoKD86TUVNfERJTU0pW15cclxufF0qKSAqXHwgKlteXHJcblx8XSs/ICpcfCAqKFteXHJcblx8XSs/KSAqXHwgKihbXlxyXG5cfF0rPykgKlx8ICooW15cclxuXSspIikKICAgIERJTU1fc3RhdGU9IHJlZ192YXIuZmluZGFsbChycHQpCgkKICAgICMgcmFpc2UgRXhjZXB0aW9uKHJlc3VsdCkKICAgIHN0ZG91dD0iIgogICAgaWYgbGVuKERJTU1fc3RhdGUpPjA6CiAgICAgICAgcmVzdWx0WyJyYyJdPTAKICAgICAgICBlcnJvcl9zdGF0ZV9GbGFnID0gRmFsc2UKICAgICAgICBzdGRvdXQ9IiIKICAgICAgICAjc3Rkb3V0PWpzb24uZHVtcHMoRElNTV9zdGF0ZSkKICAgICAgICBmb3IgZGltbSBpbiBESU1NX3N0YXRlOgogICAgICAgICAgICBpZiBkaW1tWzFdLnVwcGVyKCkhPSJPSyI6CiAgICAgICAgICAgICAgICBlcnJvcl9zdGF0ZV9GbGFnPVRydWUKICAgICAgICAgICAgICAgIHN0ZG91dCA9c3Rkb3V0ICsgIiVz77yaJXMsJXNcbiIgJShkaW1tWzBdLGRpbW1bMV0sZGltbVszXSkKCQkJCQogICAgICAgIGlmIGVycm9yX3N0YXRlX0ZsYWc6CiAgICAgICAgICAgIHN0ZG91dCA9IuacjeWKoeWZqOWGheWtmOajgOa1i+WIsOW8guW4uOeKtuaAgS5cbiIgKyBzdGRvdXQKICAgICAgICBlbHNlOgogICAgICAgICAgICBzdGRvdXQgPSLmo4Dmn6XmnI3liqHlmajlhoXlrZjnirbmgIHmraPluLguIgogICAgZWxzZToKICAgICAgICAjcmVzdWx0WyJyYyJdPTEKICAgICAgICBzdGRvdXQgPSAi5p+l6K+i5LiN5YiwRElNTeS/oeaBryIKICAgICAgICAKICAgIHJlc3VsdCA9IHJzRm9ybWF0KHN0ZG91dCxyZXN1bHQpCiAgICAjIOi/lOWbnuaJp+ihjOe7k+aenAogICAgcmV0dXJuIHJlc3VsdAoKIyDop4TliJnljJbovpPlh7rnu5PmnpwKZGVmIHJzRm9ybWF0KHN0ZG91dCwgcmVzdWx0KToKICAgICMgdG9kbwogICAgcmVzdWx0WyJyYyJdID0gMAogICAgcmVzdWx0WyJmYWlsZWQiXSA9IEZhbHNlCiAgICByZXN1bHRbInN0ZG91dCJdID0gc3Rkb3V0CiAgICByZXR1cm4gcmVzdWx0",
                "label": null,
                "authScope": "public",
                "args": null,
                "params": [],
                "description": "服务器检查内存状态",
                "beginDate": null,
                "endDate": null,
                "user": null,
                "authUser": null,
                "editable": "0"
            },
            {
                "id": "a39848afb0474738a03e192b66904ec2",
                "createBy": "10058",
                "createDate": "2022-06-29 14:47:05",
                "updateBy": "10058",
                "updateDate": "2022-08-16 10:33:37",
                "remarks": null,
                "orders": null,
                "isNewRecord": false,
                "name": "服务器检查系统版本",
                "type": "action_script",
                "version": "1.0.4",
                "lang": "python",
                "code": "import re\nimport json\n# version: Python3\n###################################################################################################\n#调试打印变量：\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n#    var = \"test\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n#\t raise Exception(var)\n#result字典说明：\n#\t result[\"rc\"]: 0或1，0表示指令执行成功，1表示指令执行失败\n#\t result[\"failed\"]: 脚本执行状态(对应用status)，True或False,设置该值可以定义脚本成功或失败\n# \t result[\"stdout\"]: 指令执行成功时的输出数据(对应用originalMsg)\n#    result[\"stderr\"]：指令执行出错时的描述信息\n#    result[\"msg\"]：用户自定义的错误描述信息(脚本失败时对应detail)，如巡检CPU指标异常\n###################################################################################################\n# please edit your code here:\ndef main(self, task_vars):\n    #self._task.args['_raw_params'] = 'cat /proc/version'\n    self._task.args['_raw_params'] = 'cat /etc/*elease'\n    result = self.execute_cmd(task_vars)\n    a = result['stdout']\n    \n    trx = re.compile(r\"\\sNAME\\s*=\\s*\\\"(.*)\\\"[\\s\\S]+?VERSION\\s*=\\s*\\\"(.*)\\\"\")    #  【OS_name,os_version】  \n    SysVerInfo= trx.findall(a)    \n    stdout=\"\"\n    \n    if len(SysVerInfo)>0:\n        result[\"rc\"]=0\n        for item in SysVerInfo:\n            stdout=stdout + \"系统名称:%s,系统版本:%s\" %(item[0],item[1])\n        stdout= \"查询到系统版本信息如下:\\n\"+stdout\n    else:\n        result[\"rc\"]=1\n        result['stdout'] = \"查询不到系统版本信息\"\n        \n    result = rsFormat(stdout,result)\n    # 返回执行结果\n    return result\n\n# 规则化输出结果\ndef rsFormat(stdout, result):\n    # todo\n    result[\"rc\"] = 0\n    result[\"failed\"] = False\n    result[\"stdout\"] = stdout\n    return result\n",
                "base64Code": "aW1wb3J0IHJlCmltcG9ydCBqc29uCiMgdmVyc2lvbjogUHl0aG9uMwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKI+iwg+ivleaJk+WNsOWPmOmHj++8mgkJCQkJCQkJCQkJCQkJCQkJCQkKIyAgICB2YXIgPSAidGVzdCIJCQkJCQkJCQkJCQkJCQkJCQkJCiMJIHJhaXNlIEV4Y2VwdGlvbih2YXIpCiNyZXN1bHTlrZflhbjor7TmmI7vvJoKIwkgcmVzdWx0WyJyYyJdOiAw5oiWMe+8jDDooajnpLrmjIfku6TmiafooYzmiJDlip/vvIwx6KGo56S65oyH5Luk5omn6KGM5aSx6LSlCiMJIHJlc3VsdFsiZmFpbGVkIl06IOiEmuacrOaJp+ihjOeKtuaAgSjlr7nlupTnlKhzdGF0dXMp77yMVHJ1ZeaIlkZhbHNlLOiuvue9ruivpeWAvOWPr+S7peWumuS5ieiEmuacrOaIkOWKn+aIluWksei0pQojIAkgcmVzdWx0WyJzdGRvdXQiXTog5oyH5Luk5omn6KGM5oiQ5Yqf5pe255qE6L6T5Ye65pWw5o2uKOWvueW6lOeUqG9yaWdpbmFsTXNnKQojICAgIHJlc3VsdFsic3RkZXJyIl3vvJrmjIfku6TmiafooYzlh7rplJnml7bnmoTmj4/ov7Dkv6Hmga8KIyAgICByZXN1bHRbIm1zZyJd77ya55So5oi36Ieq5a6a5LmJ55qE6ZSZ6K+v5o+P6L+w5L+h5oGvKOiEmuacrOWksei0peaXtuWvueW6lGRldGFpbCnvvIzlpoLlt6Hmo4BDUFXmjIfmoIflvILluLgKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgcGxlYXNlIGVkaXQgeW91ciBjb2RlIGhlcmU6CmRlZiBtYWluKHNlbGYsIHRhc2tfdmFycyk6CiAgICAjc2VsZi5fdGFzay5hcmdzWydfcmF3X3BhcmFtcyddID0gJ2NhdCAvcHJvYy92ZXJzaW9uJwogICAgc2VsZi5fdGFzay5hcmdzWydfcmF3X3BhcmFtcyddID0gJ2NhdCAvZXRjLyplbGVhc2UnCiAgICByZXN1bHQgPSBzZWxmLmV4ZWN1dGVfY21kKHRhc2tfdmFycykKICAgIGEgPSByZXN1bHRbJ3N0ZG91dCddCiAgICAKICAgIHRyeCA9IHJlLmNvbXBpbGUociJcc05BTUVccyo9XHMqXCIoLiopXCJbXHNcU10rP1ZFUlNJT05ccyo9XHMqXCIoLiopXCIiKSAgICAjICDjgJBPU19uYW1lLG9zX3ZlcnNpb27jgJEgIAogICAgU3lzVmVySW5mbz0gdHJ4LmZpbmRhbGwoYSkgICAgCiAgICBzdGRvdXQ9IiIKICAgIAogICAgaWYgbGVuKFN5c1ZlckluZm8pPjA6CiAgICAgICAgcmVzdWx0WyJyYyJdPTAKICAgICAgICBmb3IgaXRlbSBpbiBTeXNWZXJJbmZvOgogICAgICAgICAgICBzdGRvdXQ9c3Rkb3V0ICsgIuezu+e7n+WQjeensDolcyzns7vnu5/niYjmnKw6JXMiICUoaXRlbVswXSxpdGVtWzFdKQogICAgICAgIHN0ZG91dD0gIuafpeivouWIsOezu+e7n+eJiOacrOS/oeaBr+WmguS4izpcbiIrc3Rkb3V0CiAgICBlbHNlOgogICAgICAgIHJlc3VsdFsicmMiXT0xCiAgICAgICAgcmVzdWx0WydzdGRvdXQnXSA9ICLmn6Xor6LkuI3liLDns7vnu5/niYjmnKzkv6Hmga8iCiAgICAgICAgCiAgICByZXN1bHQgPSByc0Zvcm1hdChzdGRvdXQscmVzdWx0KQogICAgIyDov5Tlm57miafooYznu5PmnpwKICAgIHJldHVybiByZXN1bHQKCiMg6KeE5YiZ5YyW6L6T5Ye657uT5p6cCmRlZiByc0Zvcm1hdChzdGRvdXQsIHJlc3VsdCk6CiAgICAjIHRvZG8KICAgIHJlc3VsdFsicmMiXSA9IDAKICAgIHJlc3VsdFsiZmFpbGVkIl0gPSBGYWxzZQogICAgcmVzdWx0WyJzdGRvdXQiXSA9IHN0ZG91dAogICAgcmV0dXJuIHJlc3VsdAo=",
                "label": null,
                "authScope": "public",
                "args": null,
                "params": [],
                "description": "服务器检查系统版本",
                "beginDate": null,
                "endDate": null,
                "user": null,
                "authUser": null,
                "editable": "0"
            },
            {
                "id": "9a05f0ec80ef4388bc2d0ae3cb38d680",
                "createBy": "10058",
                "createDate": "2022-08-15 13:49:06",
                "updateBy": "10058",
                "updateDate": "2022-08-16 10:26:55",
                "remarks": null,
                "orders": null,
                "isNewRecord": false,
                "name": "服务器检查电源状态",
                "type": "action_script",
                "version": "1.0.3",
                "lang": "python",
                "code": "# version: Python3\n###################################################################################################\n#调试打印变量：\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n#    var = \"test\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n#\t raise Exception(var)\n#result字典说明：\n#\t result[\"rc\"]: 0或1，0表示指令执行成功，1表示指令执行失败\n#\t result[\"failed\"]: 脚本执行状态(对应用status)，True或False,设置该值可以定义脚本成功或失败\n# \t result[\"stdout\"]: 指令执行成功时的输出数据(对应用originalMsg)\n#    result[\"stderr\"]：指令执行出错时的描述信息\n#    result[\"msg\"]：用户自定义的错误描述信息(脚本失败时对应detail)，如巡检Power指标异常\n###################################################################################################\n# please edit your code here:\nimport binascii\nimport re\nimport json\ndef main(self, task_vars):\n    # 获取设备BMC IP\n    bmc_ip = task_vars.get(\"ansible_bmc_ip\", \"\")\n    # 获取设备的BMC账号\n    bmc_user = task_vars.get(\"ansible_bmc_user\", \"\")\n    # 获取设备的BMC密码\n    bmc_pass = task_vars.get(\"ansible_bmc_pass\", \"\")\n    # 构建指令\n    self._task.args['_raw_params'] = 'ipmitool -I lanplus -H {} -U {} -P {} sdr elist | grep -i ps'.format(bmc_ip, bmc_user, bmc_pass)\n    # 执行指令\n    result = self.execute_cmd(task_vars)\n    rpt = result['stdout']\n    reg_var = re.compile(r\"(.*PS[^\\|]*) *\\| *[^\\r\\n\\|]+? *\\| *([^\\r\\n\\|]+?) *\\| *([^\\r\\n\\|]+?) *\\| *([^\\r\\n]+)\")\n    Power_state= reg_var.findall(rpt)\n\t\n    # raise Exception(result)\n    stdout=\"\"\n    if len(Power_state)>0:\n        result[\"rc\"]=0\n        error_state_Flag = False\n        #stdout=json.dumps(Power_state)\n        for Power in Power_state:\n            if Power[1].upper()!=\"OK\":\n                error_state_Flag=True\n                stdout =stdout + \"%s：%s\" %(Power[0],Power[1])\n        if error_state_Flag:\n            stdout =\"服务器电源检测到异常状态.\" + stdout\n        else:\n            stdout =\"检查服务器电源状态正常.\"\n    else:\n        #result[\"rc\"]=1\n        stdout = \"查询不到服务器电源状态信息\"\n        \n    result = rsFormat(stdout,result)\n    # 返回执行结果\n    return result\n\n# 规则化输出结果\ndef rsFormat(stdout, result):\n    # todo\n    result[\"rc\"] = 0\n    result[\"failed\"] = False\n    result[\"stdout\"] = stdout\n    return result",
                "base64Code": "IyB2ZXJzaW9uOiBQeXRob24zCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoj6LCD6K+V5omT5Y2w5Y+Y6YeP77yaCQkJCQkJCQkJCQkJCQkJCQkJCQojICAgIHZhciA9ICJ0ZXN0IgkJCQkJCQkJCQkJCQkJCQkJCQkKIwkgcmFpc2UgRXhjZXB0aW9uKHZhcikKI3Jlc3VsdOWtl+WFuOivtOaYju+8mgojCSByZXN1bHRbInJjIl06IDDmiJYx77yMMOihqOekuuaMh+S7pOaJp+ihjOaIkOWKn++8jDHooajnpLrmjIfku6TmiafooYzlpLHotKUKIwkgcmVzdWx0WyJmYWlsZWQiXTog6ISa5pys5omn6KGM54q25oCBKOWvueW6lOeUqHN0YXR1cynvvIxUcnVl5oiWRmFsc2Us6K6+572u6K+l5YC85Y+v5Lul5a6a5LmJ6ISa5pys5oiQ5Yqf5oiW5aSx6LSlCiMgCSByZXN1bHRbInN0ZG91dCJdOiDmjIfku6TmiafooYzmiJDlip/ml7bnmoTovpPlh7rmlbDmja4o5a+55bqU55Sob3JpZ2luYWxNc2cpCiMgICAgcmVzdWx0WyJzdGRlcnIiXe+8muaMh+S7pOaJp+ihjOWHuumUmeaXtueahOaPj+i/sOS/oeaBrwojICAgIHJlc3VsdFsibXNnIl3vvJrnlKjmiLfoh6rlrprkuYnnmoTplJnor6/mj4/ov7Dkv6Hmga8o6ISa5pys5aSx6LSl5pe25a+55bqUZGV0YWlsKe+8jOWmguW3oeajgFBvd2Vy5oyH5qCH5byC5bi4CiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIHBsZWFzZSBlZGl0IHlvdXIgY29kZSBoZXJlOgppbXBvcnQgYmluYXNjaWkKaW1wb3J0IHJlCmltcG9ydCBqc29uCmRlZiBtYWluKHNlbGYsIHRhc2tfdmFycyk6CiAgICAjIOiOt+WPluiuvuWkh0JNQyBJUAogICAgYm1jX2lwID0gdGFza192YXJzLmdldCgiYW5zaWJsZV9ibWNfaXAiLCAiIikKICAgICMg6I635Y+W6K6+5aSH55qEQk1D6LSm5Y+3CiAgICBibWNfdXNlciA9IHRhc2tfdmFycy5nZXQoImFuc2libGVfYm1jX3VzZXIiLCAiIikKICAgICMg6I635Y+W6K6+5aSH55qEQk1D5a+G56CBCiAgICBibWNfcGFzcyA9IHRhc2tfdmFycy5nZXQoImFuc2libGVfYm1jX3Bhc3MiLCAiIikKICAgICMg5p6E5bu65oyH5LukCiAgICBzZWxmLl90YXNrLmFyZ3NbJ19yYXdfcGFyYW1zJ10gPSAnaXBtaXRvb2wgLUkgbGFucGx1cyAtSCB7fSAtVSB7fSAtUCB7fSBzZHIgZWxpc3QgfCBncmVwIC1pIHBzJy5mb3JtYXQoYm1jX2lwLCBibWNfdXNlciwgYm1jX3Bhc3MpCiAgICAjIOaJp+ihjOaMh+S7pAogICAgcmVzdWx0ID0gc2VsZi5leGVjdXRlX2NtZCh0YXNrX3ZhcnMpCiAgICBycHQgPSByZXN1bHRbJ3N0ZG91dCddCiAgICByZWdfdmFyID0gcmUuY29tcGlsZShyIiguKlBTW15cfF0qKSAqXHwgKlteXHJcblx8XSs/ICpcfCAqKFteXHJcblx8XSs/KSAqXHwgKihbXlxyXG5cfF0rPykgKlx8ICooW15cclxuXSspIikKICAgIFBvd2VyX3N0YXRlPSByZWdfdmFyLmZpbmRhbGwocnB0KQoJCiAgICAjIHJhaXNlIEV4Y2VwdGlvbihyZXN1bHQpCiAgICBzdGRvdXQ9IiIKICAgIGlmIGxlbihQb3dlcl9zdGF0ZSk+MDoKICAgICAgICByZXN1bHRbInJjIl09MAogICAgICAgIGVycm9yX3N0YXRlX0ZsYWcgPSBGYWxzZQogICAgICAgICNzdGRvdXQ9anNvbi5kdW1wcyhQb3dlcl9zdGF0ZSkKICAgICAgICBmb3IgUG93ZXIgaW4gUG93ZXJfc3RhdGU6CiAgICAgICAgICAgIGlmIFBvd2VyWzFdLnVwcGVyKCkhPSJPSyI6CiAgICAgICAgICAgICAgICBlcnJvcl9zdGF0ZV9GbGFnPVRydWUKICAgICAgICAgICAgICAgIHN0ZG91dCA9c3Rkb3V0ICsgIiVz77yaJXMiICUoUG93ZXJbMF0sUG93ZXJbMV0pCiAgICAgICAgaWYgZXJyb3Jfc3RhdGVfRmxhZzoKICAgICAgICAgICAgc3Rkb3V0ID0i5pyN5Yqh5Zmo55S15rqQ5qOA5rWL5Yiw5byC5bi454q25oCBLiIgKyBzdGRvdXQKICAgICAgICBlbHNlOgogICAgICAgICAgICBzdGRvdXQgPSLmo4Dmn6XmnI3liqHlmajnlLXmupDnirbmgIHmraPluLguIgogICAgZWxzZToKICAgICAgICAjcmVzdWx0WyJyYyJdPTEKICAgICAgICBzdGRvdXQgPSAi5p+l6K+i5LiN5Yiw5pyN5Yqh5Zmo55S15rqQ54q25oCB5L+h5oGvIgogICAgICAgIAogICAgcmVzdWx0ID0gcnNGb3JtYXQoc3Rkb3V0LHJlc3VsdCkKICAgICMg6L+U5Zue5omn6KGM57uT5p6cCiAgICByZXR1cm4gcmVzdWx0CgojIOinhOWImeWMlui+k+WHuue7k+aenApkZWYgcnNGb3JtYXQoc3Rkb3V0LCByZXN1bHQpOgogICAgIyB0b2RvCiAgICByZXN1bHRbInJjIl0gPSAwCiAgICByZXN1bHRbImZhaWxlZCJdID0gRmFsc2UKICAgIHJlc3VsdFsic3Rkb3V0Il0gPSBzdGRvdXQKICAgIHJldHVybiByZXN1bHQ=",
                "label": null,
                "authScope": "public",
                "args": null,
                "params": [],
                "description": "服务器检查电源状态",
                "beginDate": null,
                "endDate": null,
                "user": null,
                "authUser": null,
                "editable": "0"
            }
        ],
        "total": 86,
        "size": 10,
        "current": 1,
        "orders": [
            {
                "column": "a.update_date",
                "asc": false
            }
        ],
        "optimizeCountSql": true,
        "hitCount": false,
        "countId": null,
        "maxLimit": null,
        "searchCount": true,
        "pages": 9
    }
}